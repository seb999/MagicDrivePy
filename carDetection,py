import cv2
from picamera2 import Picamera2

car_cascade = cv2.CascadeClassifier('haarcascade_cars.xml')

picam2 = Picamera2()
picam2.configure(picam2.create_preview_configuration(main={"format": 'XRGB8888', "size": (640, 480)}))
picam2.start()
picam2.set_controls({"AfMode": 2, "LensPosition": 425})
cv2.startWindowThread()

detection_counter = 0
detection_frequency = 2  # Detect cars every 5 frames
known_car_width = 2.0  # Width of a car in meters
focal_length = 2171.0  # Focal length of your camera (in pixels)
previous_car_positions = []

# read until video is completed
while True:
    # capture frame by frame
    frame = picam2.capture_array()

    if detection_counter % detection_frequency == 0:
        # convert video into gray scale of each frame
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # detect cars in the video
        cars = car_cascade.detectMultiScale(gray, 1.1, 3)

        previous_car_positions = cars

    # to draw a rectangle in each car and calculate distance
    for (x, y, w, h) in previous_car_positions:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # Calculate distance to the car
        apparent_car_width = w
        distance = (known_car_width * focal_length) / apparent_car_width

        # Draw the distance on the frame
        cv2.putText(frame, f"Distance: {distance:.2f} meters", (x, y - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
    
    cv2.imshow('video', frame)

    # Increment the detection counter
    detection_counter += 1

    # press Q on the keyboard to exit
    if cv2.waitKey(25) & 0xFF == ord('q'):
        break

# close all the frames
cv2.destroyAllWindows()
